using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace PokemonGoDesktop.API.Proto.Compiler
{
	public abstract class MessageMarkersGenerator : ICodeGenerator
	{
		/// <summary>
		/// Collection of request message names.
		/// </summary>
		protected IEnumerable<string> messageFileMessageNames { get; }

		/// <summary>
		/// Indicates the namespace of the messages
		/// </summary>
		private QualifiedNameSyntax networkMessageNamespace
		{
			get
			{
				return QualifiedName
					(
						SyntaxFactory.QualifiedName
						(
							SyntaxFactory.IdentifierName(nameof(PokemonGoDesktop)),
							SyntaxFactory.IdentifierName(nameof(API))
						)
						.WithDotToken
						(
							SyntaxFactory.Token(SyntaxKind.DotToken)
						),
						IdentifierName
						(
							Identifier
							(
								TriviaList(),
								nameof(Proto),
								TriviaList
								(
									LineFeed
								)
							)
						)
					)
					.WithDotToken
					(
						Token(SyntaxKind.DotToken)
					);
			}
		}

		/// <summary>
		/// Implementer should indicate the string name of the message/payload marker interface name.
		/// </summary>
		protected  abstract string markerInterfaceName { get; }

		/// <summary>
		/// Creates a new request market code generator with the provided
		/// request proto/file names.
		/// </summary>
		/// <param name="messageFileNames"></param>
		public MessageMarkersGenerator(IEnumerable<string> messageFileNames)
		{
			messageFileMessageNames = messageFileNames;
		}

		public virtual string Generate()
		{
			SyntaxList<UsingDirectiveSyntax> syntaxDirectives = SingletonList<UsingDirectiveSyntax>
			(
				UsingDirective
				(
					SyntaxFactory.QualifiedName
					(
						SyntaxFactory.QualifiedName
						(
							SyntaxFactory.IdentifierName(nameof(PokemonGoDesktop)),
							SyntaxFactory.IdentifierName(nameof(API))
						)
						.WithDotToken
						(
							SyntaxFactory.Token(SyntaxKind.DotToken)
						),
						SyntaxFactory.IdentifierName(nameof(Proto))
					)
					.WithDotToken
					(
						SyntaxFactory.Token(SyntaxKind.DotToken)
					)
				)
				.WithUsingKeyword
				(
					Token
					(
						TriviaList(),
						SyntaxKind.UsingKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithSemicolonToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.SemicolonToken,
						TriviaList
						(
							LineFeed
						)
					)
				)
			);

			SyntaxList<MemberDeclarationSyntax> classDefs = SyntaxFactory.List<MemberDeclarationSyntax>(messageFileMessageNames.Select(s => GenerateClassDeclaration(s)));

			//We need to enclose the class defs in a namespace
			SyntaxList<MemberDeclarationSyntax> members = SingletonList<MemberDeclarationSyntax>
			(
				//We don't need to use nameof because those namespaces are auto-generated by protoc
				NamespaceDeclaration
				(
					networkMessageNamespace
				)
				.WithNamespaceKeyword
				(
					Token
					(
						TriviaList
						(
							LineFeed
						),
						SyntaxKind.NamespaceKeyword,
						TriviaList
						(
							Space
						)
					)
				)
				.WithOpenBraceToken
				(
					Token
					(
						TriviaList(),
						SyntaxKind.OpenBraceToken,
						TriviaList
						(
							LineFeed
						)
					)
				)
				.WithMembers(classDefs)//insert the class defs into the namespace
				.WithCloseBraceToken //this closes the final brace in the name space.
				(
					SyntaxFactory.Token(SyntaxKind.CloseBraceToken)
				)
			);

			CompilationUnitSyntax unit = CompilationUnit().WithUsings(syntaxDirectives)
				.WithMembers(members) //add whole members not just classes
				.WithEndOfFileToken
				(
					SyntaxFactory.Token(SyntaxKind.EndOfFileToken)
				);

			//Now we use Roslyn to write out the file.
			StringBuilder sb = new StringBuilder();

			using (StringWriter writer = new StringWriter(sb))
			{
				Formatter.Format(unit, new AdhocWorkspace()).WriteTo(writer);
				return sb.ToString();
			}
		}

		public MemberDeclarationSyntax GenerateClassDeclaration(string messageName)
		{
			return ClassDeclaration
					(
						Identifier
						(
							TriviaList(),
							messageName,
							TriviaList
							(
								Space
							)
						)
					)
					.WithModifiers
					(
						TokenList
						(
							new[]
							{
								Token
								(
									TriviaList
									(
										Tab
									),
									SyntaxKind.PublicKeyword,
									TriviaList
									(
										Space
									)
								),
								Token
								(
									TriviaList(),
									SyntaxKind.SealedKeyword,
									TriviaList
									(
										Space
									)
								),
								Token
								(
									TriviaList(),
									SyntaxKind.PartialKeyword,
									TriviaList
									(
										Space
									)
								)
							}
						)
					)
					.WithKeyword
					(
						Token
						(
							TriviaList(),
							SyntaxKind.ClassKeyword,
							TriviaList
							(
								Space
							)
						)
					)
					.WithBaseList
					(
						BaseList
						(
							SingletonSeparatedList<BaseTypeSyntax>
							(
								SimpleBaseType
								(
									IdentifierName
									(
										Identifier
										(
											TriviaList(),
											markerInterfaceName,
											TriviaList
											(
												LineFeed
											)
										)
									)
								)
							)
						)
						.WithColonToken
						(
							Token
							(
								TriviaList(),
								SyntaxKind.ColonToken,
								TriviaList
								(
									Space
								)
							)
						)
					)
					.WithOpenBraceToken
					(
						Token
						(
							TriviaList
							(
								Tab
							),
							SyntaxKind.OpenBraceToken,
							TriviaList
							(
								LineFeed
							)
						)
					)
					.WithCloseBraceToken
					(
						Token
						(
							TriviaList
							(
								new[]
								{
									LineFeed,
									Tab
								}
							),
							SyntaxKind.CloseBraceToken,
							TriviaList
							(
								LineFeed
							)
						)
					);
		}
	}
}
