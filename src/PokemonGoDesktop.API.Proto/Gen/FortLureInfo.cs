// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/Fort/FortLureInfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PokemonGoDesktop.API.Proto {

  /// <summary>Holder for reflection information generated from Map/Fort/FortLureInfo.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FortLureInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for Map/Fort/FortLureInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FortLureInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtNYXAvRm9ydC9Gb3J0THVyZUluZm8ucHJvdG8SCE1hcC5Gb3J0GhVFbnVt",
            "cy9Qb2tlbW9uSWQucHJvdG8igQEKDEZvcnRMdXJlSW5mbxIPCgdmb3J0X2lk",
            "GAEgASgJEhAKCHVua25vd24yGAIgASgBEisKEWFjdGl2ZV9wb2tlbW9uX2lk",
            "GAMgASgOMhAuRW51bXMuUG9rZW1vbklkEiEKGWx1cmVfZXhwaXJlc190aW1l",
            "c3RhbXBfbXMYBCABKANCHaoCGlBva2Vtb25Hb0Rlc2t0b3AuQVBJLlByb3Rv",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PokemonGoDesktop.API.Proto.PokemonIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoDesktop.API.Proto.FortLureInfo), global::PokemonGoDesktop.API.Proto.FortLureInfo.Parser, new[]{ "FortId", "Unknown2", "ActivePokemonId", "LureExpiresTimestampMs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FortLureInfo : pb::IMessage<FortLureInfo> {
    private static readonly pb::MessageParser<FortLureInfo> _parser = new pb::MessageParser<FortLureInfo>(() => new FortLureInfo());
    public static pb::MessageParser<FortLureInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoDesktop.API.Proto.FortLureInfoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FortLureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FortLureInfo(FortLureInfo other) : this() {
      fortId_ = other.fortId_;
      unknown2_ = other.unknown2_;
      activePokemonId_ = other.activePokemonId_;
      lureExpiresTimestampMs_ = other.lureExpiresTimestampMs_;
    }

    public FortLureInfo Clone() {
      return new FortLureInfo(this);
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 1;
    private string fortId_ = "";
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unknown2" field.</summary>
    public const int Unknown2FieldNumber = 2;
    private double unknown2_;
    public double Unknown2 {
      get { return unknown2_; }
      set {
        unknown2_ = value;
      }
    }

    /// <summary>Field number for the "active_pokemon_id" field.</summary>
    public const int ActivePokemonIdFieldNumber = 3;
    private global::PokemonGoDesktop.API.Proto.PokemonId activePokemonId_ = 0;
    public global::PokemonGoDesktop.API.Proto.PokemonId ActivePokemonId {
      get { return activePokemonId_; }
      set {
        activePokemonId_ = value;
      }
    }

    /// <summary>Field number for the "lure_expires_timestamp_ms" field.</summary>
    public const int LureExpiresTimestampMsFieldNumber = 4;
    private long lureExpiresTimestampMs_;
    public long LureExpiresTimestampMs {
      get { return lureExpiresTimestampMs_; }
      set {
        lureExpiresTimestampMs_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FortLureInfo);
    }

    public bool Equals(FortLureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortId != other.FortId) return false;
      if (Unknown2 != other.Unknown2) return false;
      if (ActivePokemonId != other.ActivePokemonId) return false;
      if (LureExpiresTimestampMs != other.LureExpiresTimestampMs) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (Unknown2 != 0D) hash ^= Unknown2.GetHashCode();
      if (ActivePokemonId != 0) hash ^= ActivePokemonId.GetHashCode();
      if (LureExpiresTimestampMs != 0L) hash ^= LureExpiresTimestampMs.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FortId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortId);
      }
      if (Unknown2 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Unknown2);
      }
      if (ActivePokemonId != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ActivePokemonId);
      }
      if (LureExpiresTimestampMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LureExpiresTimestampMs);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (Unknown2 != 0D) {
        size += 1 + 8;
      }
      if (ActivePokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivePokemonId);
      }
      if (LureExpiresTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LureExpiresTimestampMs);
      }
      return size;
    }

    public void MergeFrom(FortLureInfo other) {
      if (other == null) {
        return;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.Unknown2 != 0D) {
        Unknown2 = other.Unknown2;
      }
      if (other.ActivePokemonId != 0) {
        ActivePokemonId = other.ActivePokemonId;
      }
      if (other.LureExpiresTimestampMs != 0L) {
        LureExpiresTimestampMs = other.LureExpiresTimestampMs;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortId = input.ReadString();
            break;
          }
          case 17: {
            Unknown2 = input.ReadDouble();
            break;
          }
          case 24: {
            activePokemonId_ = (global::PokemonGoDesktop.API.Proto.PokemonId) input.ReadEnum();
            break;
          }
          case 32: {
            LureExpiresTimestampMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
