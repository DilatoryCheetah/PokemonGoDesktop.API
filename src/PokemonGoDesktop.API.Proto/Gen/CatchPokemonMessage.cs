// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Networking/Requests/Messages/CatchPokemonMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PokemonGoDesktop.API.Proto {

  /// <summary>Holder for reflection information generated from Networking/Requests/Messages/CatchPokemonMessage.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CatchPokemonMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for Networking/Requests/Messages/CatchPokemonMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CatchPokemonMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZOZXR3b3JraW5nL1JlcXVlc3RzL01lc3NhZ2VzL0NhdGNoUG9rZW1vbk1l",
            "c3NhZ2UucHJvdG8SHE5ldHdvcmtpbmcuUmVxdWVzdHMuTWVzc2FnZXMaG0lu",
            "dmVudG9yeS9JdGVtL0l0ZW1JZC5wcm90byLbAQoTQ2F0Y2hQb2tlbW9uTWVz",
            "c2FnZRIUCgxlbmNvdW50ZXJfaWQYASABKAYSKAoIcG9rZWJhbGwYAiABKA4y",
            "Fi5JbnZlbnRvcnkuSXRlbS5JdGVtSWQSHwoXbm9ybWFsaXplZF9yZXRpY2xl",
            "X3NpemUYAyABKAESFgoOc3Bhd25fcG9pbnRfaWQYBCABKAkSEwoLaGl0X3Bv",
            "a2Vtb24YBSABKAgSFQoNc3Bpbl9tb2RpZmllchgGIAEoARIfChdub3JtYWxp",
            "emVkX2hpdF9wb3NpdGlvbhgHIAEoAUIdqgIaUG9rZW1vbkdvRGVza3RvcC5B",
            "UEkuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PokemonGoDesktop.API.Proto.ItemIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoDesktop.API.Proto.CatchPokemonMessage), global::PokemonGoDesktop.API.Proto.CatchPokemonMessage.Parser, new[]{ "EncounterId", "Pokeball", "NormalizedReticleSize", "SpawnPointId", "HitPokemon", "SpinModifier", "NormalizedHitPosition" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CatchPokemonMessage : pb::IMessage<CatchPokemonMessage> {
    private static readonly pb::MessageParser<CatchPokemonMessage> _parser = new pb::MessageParser<CatchPokemonMessage>(() => new CatchPokemonMessage());
    public static pb::MessageParser<CatchPokemonMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoDesktop.API.Proto.CatchPokemonMessageReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CatchPokemonMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CatchPokemonMessage(CatchPokemonMessage other) : this() {
      encounterId_ = other.encounterId_;
      pokeball_ = other.pokeball_;
      normalizedReticleSize_ = other.normalizedReticleSize_;
      spawnPointId_ = other.spawnPointId_;
      hitPokemon_ = other.hitPokemon_;
      spinModifier_ = other.spinModifier_;
      normalizedHitPosition_ = other.normalizedHitPosition_;
    }

    public CatchPokemonMessage Clone() {
      return new CatchPokemonMessage(this);
    }

    /// <summary>Field number for the "encounter_id" field.</summary>
    public const int EncounterIdFieldNumber = 1;
    private ulong encounterId_;
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "pokeball" field.</summary>
    public const int PokeballFieldNumber = 2;
    private global::PokemonGoDesktop.API.Proto.ItemId pokeball_ = 0;
    public global::PokemonGoDesktop.API.Proto.ItemId Pokeball {
      get { return pokeball_; }
      set {
        pokeball_ = value;
      }
    }

    /// <summary>Field number for the "normalized_reticle_size" field.</summary>
    public const int NormalizedReticleSizeFieldNumber = 3;
    private double normalizedReticleSize_;
    public double NormalizedReticleSize {
      get { return normalizedReticleSize_; }
      set {
        normalizedReticleSize_ = value;
      }
    }

    /// <summary>Field number for the "spawn_point_id" field.</summary>
    public const int SpawnPointIdFieldNumber = 4;
    private string spawnPointId_ = "";
    public string SpawnPointId {
      get { return spawnPointId_; }
      set {
        spawnPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hit_pokemon" field.</summary>
    public const int HitPokemonFieldNumber = 5;
    private bool hitPokemon_;
    public bool HitPokemon {
      get { return hitPokemon_; }
      set {
        hitPokemon_ = value;
      }
    }

    /// <summary>Field number for the "spin_modifier" field.</summary>
    public const int SpinModifierFieldNumber = 6;
    private double spinModifier_;
    public double SpinModifier {
      get { return spinModifier_; }
      set {
        spinModifier_ = value;
      }
    }

    /// <summary>Field number for the "normalized_hit_position" field.</summary>
    public const int NormalizedHitPositionFieldNumber = 7;
    private double normalizedHitPosition_;
    public double NormalizedHitPosition {
      get { return normalizedHitPosition_; }
      set {
        normalizedHitPosition_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CatchPokemonMessage);
    }

    public bool Equals(CatchPokemonMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncounterId != other.EncounterId) return false;
      if (Pokeball != other.Pokeball) return false;
      if (NormalizedReticleSize != other.NormalizedReticleSize) return false;
      if (SpawnPointId != other.SpawnPointId) return false;
      if (HitPokemon != other.HitPokemon) return false;
      if (SpinModifier != other.SpinModifier) return false;
      if (NormalizedHitPosition != other.NormalizedHitPosition) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      if (Pokeball != 0) hash ^= Pokeball.GetHashCode();
      if (NormalizedReticleSize != 0D) hash ^= NormalizedReticleSize.GetHashCode();
      if (SpawnPointId.Length != 0) hash ^= SpawnPointId.GetHashCode();
      if (HitPokemon != false) hash ^= HitPokemon.GetHashCode();
      if (SpinModifier != 0D) hash ^= SpinModifier.GetHashCode();
      if (NormalizedHitPosition != 0D) hash ^= NormalizedHitPosition.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EncounterId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(EncounterId);
      }
      if (Pokeball != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Pokeball);
      }
      if (NormalizedReticleSize != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(NormalizedReticleSize);
      }
      if (SpawnPointId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpawnPointId);
      }
      if (HitPokemon != false) {
        output.WriteRawTag(40);
        output.WriteBool(HitPokemon);
      }
      if (SpinModifier != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SpinModifier);
      }
      if (NormalizedHitPosition != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NormalizedHitPosition);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      if (Pokeball != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pokeball);
      }
      if (NormalizedReticleSize != 0D) {
        size += 1 + 8;
      }
      if (SpawnPointId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnPointId);
      }
      if (HitPokemon != false) {
        size += 1 + 1;
      }
      if (SpinModifier != 0D) {
        size += 1 + 8;
      }
      if (NormalizedHitPosition != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(CatchPokemonMessage other) {
      if (other == null) {
        return;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
      if (other.Pokeball != 0) {
        Pokeball = other.Pokeball;
      }
      if (other.NormalizedReticleSize != 0D) {
        NormalizedReticleSize = other.NormalizedReticleSize;
      }
      if (other.SpawnPointId.Length != 0) {
        SpawnPointId = other.SpawnPointId;
      }
      if (other.HitPokemon != false) {
        HitPokemon = other.HitPokemon;
      }
      if (other.SpinModifier != 0D) {
        SpinModifier = other.SpinModifier;
      }
      if (other.NormalizedHitPosition != 0D) {
        NormalizedHitPosition = other.NormalizedHitPosition;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            EncounterId = input.ReadFixed64();
            break;
          }
          case 16: {
            pokeball_ = (global::PokemonGoDesktop.API.Proto.ItemId) input.ReadEnum();
            break;
          }
          case 25: {
            NormalizedReticleSize = input.ReadDouble();
            break;
          }
          case 34: {
            SpawnPointId = input.ReadString();
            break;
          }
          case 40: {
            HitPokemon = input.ReadBool();
            break;
          }
          case 49: {
            SpinModifier = input.ReadDouble();
            break;
          }
          case 57: {
            NormalizedHitPosition = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
