// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/Pokemon/NearbyPokemon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PokemonGoDesktop.API.Proto {

  /// <summary>Holder for reflection information generated from Map/Pokemon/NearbyPokemon.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class NearbyPokemonReflection {

    #region Descriptor
    /// <summary>File descriptor for Map/Pokemon/NearbyPokemon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NearbyPokemonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9NYXAvUG9rZW1vbi9OZWFyYnlQb2tlbW9uLnByb3RvEgtNYXAuUG9rZW1v",
            "bhoVRW51bXMvUG9rZW1vbklkLnByb3RvImcKDU5lYXJieVBva2Vtb24SJAoK",
            "cG9rZW1vbl9pZBgBIAEoDjIQLkVudW1zLlBva2Vtb25JZBIaChJkaXN0YW5j",
            "ZV9pbl9tZXRlcnMYAiABKAISFAoMZW5jb3VudGVyX2lkGAMgASgGQh2qAhpQ",
            "b2tlbW9uR29EZXNrdG9wLkFQSS5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PokemonGoDesktop.API.Proto.PokemonIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PokemonGoDesktop.API.Proto.NearbyPokemon), global::PokemonGoDesktop.API.Proto.NearbyPokemon.Parser, new[]{ "PokemonId", "DistanceInMeters", "EncounterId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NearbyPokemon : pb::IMessage<NearbyPokemon> {
    private static readonly pb::MessageParser<NearbyPokemon> _parser = new pb::MessageParser<NearbyPokemon>(() => new NearbyPokemon());
    public static pb::MessageParser<NearbyPokemon> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::PokemonGoDesktop.API.Proto.NearbyPokemonReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NearbyPokemon() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NearbyPokemon(NearbyPokemon other) : this() {
      pokemonId_ = other.pokemonId_;
      distanceInMeters_ = other.distanceInMeters_;
      encounterId_ = other.encounterId_;
    }

    public NearbyPokemon Clone() {
      return new NearbyPokemon(this);
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private global::PokemonGoDesktop.API.Proto.PokemonId pokemonId_ = 0;
    public global::PokemonGoDesktop.API.Proto.PokemonId PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "distance_in_meters" field.</summary>
    public const int DistanceInMetersFieldNumber = 2;
    private float distanceInMeters_;
    public float DistanceInMeters {
      get { return distanceInMeters_; }
      set {
        distanceInMeters_ = value;
      }
    }

    /// <summary>Field number for the "encounter_id" field.</summary>
    public const int EncounterIdFieldNumber = 3;
    private ulong encounterId_;
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NearbyPokemon);
    }

    public bool Equals(NearbyPokemon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      if (DistanceInMeters != other.DistanceInMeters) return false;
      if (EncounterId != other.EncounterId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (DistanceInMeters != 0F) hash ^= DistanceInMeters.GetHashCode();
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PokemonId);
      }
      if (DistanceInMeters != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DistanceInMeters);
      }
      if (EncounterId != 0UL) {
        output.WriteRawTag(25);
        output.WriteFixed64(EncounterId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonId);
      }
      if (DistanceInMeters != 0F) {
        size += 1 + 4;
      }
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(NearbyPokemon other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.DistanceInMeters != 0F) {
        DistanceInMeters = other.DistanceInMeters;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pokemonId_ = (global::PokemonGoDesktop.API.Proto.PokemonId) input.ReadEnum();
            break;
          }
          case 21: {
            DistanceInMeters = input.ReadFloat();
            break;
          }
          case 25: {
            EncounterId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
