// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Networking/Requests/Messages/GetDownloadUrlsMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Networking.Requests.Messages {

  /// <summary>Holder for reflection information generated from Networking/Requests/Messages/GetDownloadUrlsMessage.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GetDownloadUrlsMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for Networking/Requests/Messages/GetDownloadUrlsMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetDownloadUrlsMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjlOZXR3b3JraW5nL1JlcXVlc3RzL01lc3NhZ2VzL0dldERvd25sb2FkVXJs",
            "c01lc3NhZ2UucHJvdG8SHE5ldHdvcmtpbmcuUmVxdWVzdHMuTWVzc2FnZXMi",
            "KgoWR2V0RG93bmxvYWRVcmxzTWVzc2FnZRIQCghhc3NldF9pZBgBIAMoCWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Networking.Requests.Messages.GetDownloadUrlsMessage), global::Networking.Requests.Messages.GetDownloadUrlsMessage.Parser, new[]{ "AssetId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  UNTESTED
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetDownloadUrlsMessage : pb::IMessage<GetDownloadUrlsMessage> {
    private static readonly pb::MessageParser<GetDownloadUrlsMessage> _parser = new pb::MessageParser<GetDownloadUrlsMessage>(() => new GetDownloadUrlsMessage());
    public static pb::MessageParser<GetDownloadUrlsMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Networking.Requests.Messages.GetDownloadUrlsMessageReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetDownloadUrlsMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetDownloadUrlsMessage(GetDownloadUrlsMessage other) : this() {
      assetId_ = other.assetId_.Clone();
    }

    public GetDownloadUrlsMessage Clone() {
      return new GetDownloadUrlsMessage(this);
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_assetId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> assetId_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> AssetId {
      get { return assetId_; }
    }

    public override bool Equals(object other) {
      return Equals(other as GetDownloadUrlsMessage);
    }

    public bool Equals(GetDownloadUrlsMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!assetId_.Equals(other.assetId_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= assetId_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      assetId_.WriteTo(output, _repeated_assetId_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += assetId_.CalculateSize(_repeated_assetId_codec);
      return size;
    }

    public void MergeFrom(GetDownloadUrlsMessage other) {
      if (other == null) {
        return;
      }
      assetId_.Add(other.assetId_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            assetId_.AddEntriesFrom(input, _repeated_assetId_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
