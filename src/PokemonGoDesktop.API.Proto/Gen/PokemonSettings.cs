// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Settings/Master/PokemonSettings.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Settings.Master {

  /// <summary>Holder for reflection information generated from Settings/Master/PokemonSettings.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PokemonSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for Settings/Master/PokemonSettings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokemonSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVTZXR0aW5ncy9NYXN0ZXIvUG9rZW1vblNldHRpbmdzLnByb3RvEg9TZXR0",
            "aW5ncy5NYXN0ZXIaFUVudW1zL1Bva2Vtb25JZC5wcm90bxoYRW51bXMvUG9r",
            "ZW1vbkNsYXNzLnByb3RvGhdFbnVtcy9Qb2tlbW9uVHlwZS5wcm90bxoXRW51",
            "bXMvUG9rZW1vbk1vdmUucHJvdG8aG0VudW1zL1Bva2Vtb25GYW1pbHlJZC5w",
            "cm90bxotU2V0dGluZ3MvTWFzdGVyL1Bva2Vtb24vU3RhdHNBdHRyaWJ1dGVz",
            "LnByb3RvGi5TZXR0aW5ncy9NYXN0ZXIvUG9rZW1vbi9DYW1lcmFBdHRyaWJ1",
            "dGVzLnByb3RvGjFTZXR0aW5ncy9NYXN0ZXIvUG9rZW1vbi9FbmNvdW50ZXJB",
            "dHRyaWJ1dGVzLnByb3RvIo4GCg9Qb2tlbW9uU2V0dGluZ3MSJAoKcG9rZW1v",
            "bl9pZBgBIAEoDjIQLkVudW1zLlBva2Vtb25JZBITCgttb2RlbF9zY2FsZRgD",
            "IAEoAhIgCgR0eXBlGAQgASgOMhIuRW51bXMuUG9rZW1vblR5cGUSIgoGdHlw",
            "ZV8yGAUgASgOMhIuRW51bXMuUG9rZW1vblR5cGUSOQoGY2FtZXJhGAYgASgL",
            "MikuU2V0dGluZ3MuTWFzdGVyLlBva2Vtb24uQ2FtZXJhQXR0cmlidXRlcxI/",
            "CgllbmNvdW50ZXIYByABKAsyLC5TZXR0aW5ncy5NYXN0ZXIuUG9rZW1vbi5F",
            "bmNvdW50ZXJBdHRyaWJ1dGVzEjcKBXN0YXRzGAggASgLMiguU2V0dGluZ3Mu",
            "TWFzdGVyLlBva2Vtb24uU3RhdHNBdHRyaWJ1dGVzEicKC3F1aWNrX21vdmVz",
            "GAkgAygOMhIuRW51bXMuUG9rZW1vbk1vdmUSKwoPY2luZW1hdGljX21vdmVz",
            "GAogAygOMhIuRW51bXMuUG9rZW1vbk1vdmUSFgoOYW5pbWF0aW9uX3RpbWUY",
            "CyADKAISJwoNZXZvbHV0aW9uX2lkcxgMIAMoDjIQLkVudW1zLlBva2Vtb25J",
            "ZBIWCg5ldm9sdXRpb25fcGlwcxgNIAEoBRIiCgVjbGFzcxgOIAEoDjITLkVu",
            "dW1zLlBva2Vtb25DbGFzcxIYChBwb2tlZGV4X2hlaWdodF9tGA8gASgCEhkK",
            "EXBva2VkZXhfd2VpZ2h0X2tnGBAgASgCEisKEXBhcmVudF9wb2tlbW9uX2lk",
            "GBEgASgOMhAuRW51bXMuUG9rZW1vbklkEhYKDmhlaWdodF9zdGRfZGV2GBIg",
            "ASgCEhYKDndlaWdodF9zdGRfZGV2GBMgASgCEhwKFGttX2Rpc3RhbmNlX3Rv",
            "X2hhdGNoGBQgASgCEikKCWZhbWlseV9pZBgVIAEoDjIWLkVudW1zLlBva2Vt",
            "b25GYW1pbHlJZBIXCg9jYW5keV90b19ldm9sdmUYFiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Enums.PokemonIdReflection.Descriptor, global::Enums.PokemonClassReflection.Descriptor, global::Enums.PokemonTypeReflection.Descriptor, global::Enums.PokemonMoveReflection.Descriptor, global::Enums.PokemonFamilyIdReflection.Descriptor, global::Settings.Master.Pokemon.StatsAttributesReflection.Descriptor, global::Settings.Master.Pokemon.CameraAttributesReflection.Descriptor, global::Settings.Master.Pokemon.EncounterAttributesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Settings.Master.PokemonSettings), global::Settings.Master.PokemonSettings.Parser, new[]{ "PokemonId", "ModelScale", "Type", "Type2", "Camera", "Encounter", "Stats", "QuickMoves", "CinematicMoves", "AnimationTime", "EvolutionIds", "EvolutionPips", "Class", "PokedexHeightM", "PokedexWeightKg", "ParentPokemonId", "HeightStdDev", "WeightStdDev", "KmDistanceToHatch", "FamilyId", "CandyToEvolve" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PokemonSettings : pb::IMessage<PokemonSettings> {
    private static readonly pb::MessageParser<PokemonSettings> _parser = new pb::MessageParser<PokemonSettings>(() => new PokemonSettings());
    public static pb::MessageParser<PokemonSettings> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Settings.Master.PokemonSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PokemonSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PokemonSettings(PokemonSettings other) : this() {
      pokemonId_ = other.pokemonId_;
      modelScale_ = other.modelScale_;
      type_ = other.type_;
      type2_ = other.type2_;
      Camera = other.camera_ != null ? other.Camera.Clone() : null;
      Encounter = other.encounter_ != null ? other.Encounter.Clone() : null;
      Stats = other.stats_ != null ? other.Stats.Clone() : null;
      quickMoves_ = other.quickMoves_.Clone();
      cinematicMoves_ = other.cinematicMoves_.Clone();
      animationTime_ = other.animationTime_.Clone();
      evolutionIds_ = other.evolutionIds_.Clone();
      evolutionPips_ = other.evolutionPips_;
      class_ = other.class_;
      pokedexHeightM_ = other.pokedexHeightM_;
      pokedexWeightKg_ = other.pokedexWeightKg_;
      parentPokemonId_ = other.parentPokemonId_;
      heightStdDev_ = other.heightStdDev_;
      weightStdDev_ = other.weightStdDev_;
      kmDistanceToHatch_ = other.kmDistanceToHatch_;
      familyId_ = other.familyId_;
      candyToEvolve_ = other.candyToEvolve_;
    }

    public PokemonSettings Clone() {
      return new PokemonSettings(this);
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private global::Enums.PokemonId pokemonId_ = 0;
    public global::Enums.PokemonId PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "model_scale" field.</summary>
    public const int ModelScaleFieldNumber = 3;
    private float modelScale_;
    public float ModelScale {
      get { return modelScale_; }
      set {
        modelScale_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Enums.PokemonType type_ = 0;
    public global::Enums.PokemonType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "type_2" field.</summary>
    public const int Type2FieldNumber = 5;
    private global::Enums.PokemonType type2_ = 0;
    public global::Enums.PokemonType Type2 {
      get { return type2_; }
      set {
        type2_ = value;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 6;
    private global::Settings.Master.Pokemon.CameraAttributes camera_;
    public global::Settings.Master.Pokemon.CameraAttributes Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "encounter" field.</summary>
    public const int EncounterFieldNumber = 7;
    private global::Settings.Master.Pokemon.EncounterAttributes encounter_;
    public global::Settings.Master.Pokemon.EncounterAttributes Encounter {
      get { return encounter_; }
      set {
        encounter_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 8;
    private global::Settings.Master.Pokemon.StatsAttributes stats_;
    public global::Settings.Master.Pokemon.StatsAttributes Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "quick_moves" field.</summary>
    public const int QuickMovesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Enums.PokemonMove> _repeated_quickMoves_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::Enums.PokemonMove) x);
    private readonly pbc::RepeatedField<global::Enums.PokemonMove> quickMoves_ = new pbc::RepeatedField<global::Enums.PokemonMove>();
    public pbc::RepeatedField<global::Enums.PokemonMove> QuickMoves {
      get { return quickMoves_; }
    }

    /// <summary>Field number for the "cinematic_moves" field.</summary>
    public const int CinematicMovesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Enums.PokemonMove> _repeated_cinematicMoves_codec
        = pb::FieldCodec.ForEnum(82, x => (int) x, x => (global::Enums.PokemonMove) x);
    private readonly pbc::RepeatedField<global::Enums.PokemonMove> cinematicMoves_ = new pbc::RepeatedField<global::Enums.PokemonMove>();
    public pbc::RepeatedField<global::Enums.PokemonMove> CinematicMoves {
      get { return cinematicMoves_; }
    }

    /// <summary>Field number for the "animation_time" field.</summary>
    public const int AnimationTimeFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_animationTime_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> animationTime_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> AnimationTime {
      get { return animationTime_; }
    }

    /// <summary>Field number for the "evolution_ids" field.</summary>
    public const int EvolutionIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Enums.PokemonId> _repeated_evolutionIds_codec
        = pb::FieldCodec.ForEnum(98, x => (int) x, x => (global::Enums.PokemonId) x);
    private readonly pbc::RepeatedField<global::Enums.PokemonId> evolutionIds_ = new pbc::RepeatedField<global::Enums.PokemonId>();
    public pbc::RepeatedField<global::Enums.PokemonId> EvolutionIds {
      get { return evolutionIds_; }
    }

    /// <summary>Field number for the "evolution_pips" field.</summary>
    public const int EvolutionPipsFieldNumber = 13;
    private int evolutionPips_;
    public int EvolutionPips {
      get { return evolutionPips_; }
      set {
        evolutionPips_ = value;
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 14;
    private global::Enums.PokemonClass class_ = 0;
    public global::Enums.PokemonClass Class {
      get { return class_; }
      set {
        class_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_height_m" field.</summary>
    public const int PokedexHeightMFieldNumber = 15;
    private float pokedexHeightM_;
    public float PokedexHeightM {
      get { return pokedexHeightM_; }
      set {
        pokedexHeightM_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_weight_kg" field.</summary>
    public const int PokedexWeightKgFieldNumber = 16;
    private float pokedexWeightKg_;
    public float PokedexWeightKg {
      get { return pokedexWeightKg_; }
      set {
        pokedexWeightKg_ = value;
      }
    }

    /// <summary>Field number for the "parent_pokemon_id" field.</summary>
    public const int ParentPokemonIdFieldNumber = 17;
    private global::Enums.PokemonId parentPokemonId_ = 0;
    public global::Enums.PokemonId ParentPokemonId {
      get { return parentPokemonId_; }
      set {
        parentPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "height_std_dev" field.</summary>
    public const int HeightStdDevFieldNumber = 18;
    private float heightStdDev_;
    public float HeightStdDev {
      get { return heightStdDev_; }
      set {
        heightStdDev_ = value;
      }
    }

    /// <summary>Field number for the "weight_std_dev" field.</summary>
    public const int WeightStdDevFieldNumber = 19;
    private float weightStdDev_;
    public float WeightStdDev {
      get { return weightStdDev_; }
      set {
        weightStdDev_ = value;
      }
    }

    /// <summary>Field number for the "km_distance_to_hatch" field.</summary>
    public const int KmDistanceToHatchFieldNumber = 20;
    private float kmDistanceToHatch_;
    public float KmDistanceToHatch {
      get { return kmDistanceToHatch_; }
      set {
        kmDistanceToHatch_ = value;
      }
    }

    /// <summary>Field number for the "family_id" field.</summary>
    public const int FamilyIdFieldNumber = 21;
    private global::Enums.PokemonFamilyId familyId_ = 0;
    public global::Enums.PokemonFamilyId FamilyId {
      get { return familyId_; }
      set {
        familyId_ = value;
      }
    }

    /// <summary>Field number for the "candy_to_evolve" field.</summary>
    public const int CandyToEvolveFieldNumber = 22;
    private int candyToEvolve_;
    public int CandyToEvolve {
      get { return candyToEvolve_; }
      set {
        candyToEvolve_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as PokemonSettings);
    }

    public bool Equals(PokemonSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      if (ModelScale != other.ModelScale) return false;
      if (Type != other.Type) return false;
      if (Type2 != other.Type2) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(Encounter, other.Encounter)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if(!quickMoves_.Equals(other.quickMoves_)) return false;
      if(!cinematicMoves_.Equals(other.cinematicMoves_)) return false;
      if(!animationTime_.Equals(other.animationTime_)) return false;
      if(!evolutionIds_.Equals(other.evolutionIds_)) return false;
      if (EvolutionPips != other.EvolutionPips) return false;
      if (Class != other.Class) return false;
      if (PokedexHeightM != other.PokedexHeightM) return false;
      if (PokedexWeightKg != other.PokedexWeightKg) return false;
      if (ParentPokemonId != other.ParentPokemonId) return false;
      if (HeightStdDev != other.HeightStdDev) return false;
      if (WeightStdDev != other.WeightStdDev) return false;
      if (KmDistanceToHatch != other.KmDistanceToHatch) return false;
      if (FamilyId != other.FamilyId) return false;
      if (CandyToEvolve != other.CandyToEvolve) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (ModelScale != 0F) hash ^= ModelScale.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Type2 != 0) hash ^= Type2.GetHashCode();
      if (camera_ != null) hash ^= Camera.GetHashCode();
      if (encounter_ != null) hash ^= Encounter.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      hash ^= quickMoves_.GetHashCode();
      hash ^= cinematicMoves_.GetHashCode();
      hash ^= animationTime_.GetHashCode();
      hash ^= evolutionIds_.GetHashCode();
      if (EvolutionPips != 0) hash ^= EvolutionPips.GetHashCode();
      if (Class != 0) hash ^= Class.GetHashCode();
      if (PokedexHeightM != 0F) hash ^= PokedexHeightM.GetHashCode();
      if (PokedexWeightKg != 0F) hash ^= PokedexWeightKg.GetHashCode();
      if (ParentPokemonId != 0) hash ^= ParentPokemonId.GetHashCode();
      if (HeightStdDev != 0F) hash ^= HeightStdDev.GetHashCode();
      if (WeightStdDev != 0F) hash ^= WeightStdDev.GetHashCode();
      if (KmDistanceToHatch != 0F) hash ^= KmDistanceToHatch.GetHashCode();
      if (FamilyId != 0) hash ^= FamilyId.GetHashCode();
      if (CandyToEvolve != 0) hash ^= CandyToEvolve.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PokemonId);
      }
      if (ModelScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ModelScale);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Type2 != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type2);
      }
      if (camera_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Camera);
      }
      if (encounter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Encounter);
      }
      if (stats_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Stats);
      }
      quickMoves_.WriteTo(output, _repeated_quickMoves_codec);
      cinematicMoves_.WriteTo(output, _repeated_cinematicMoves_codec);
      animationTime_.WriteTo(output, _repeated_animationTime_codec);
      evolutionIds_.WriteTo(output, _repeated_evolutionIds_codec);
      if (EvolutionPips != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EvolutionPips);
      }
      if (Class != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Class);
      }
      if (PokedexHeightM != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PokedexHeightM);
      }
      if (PokedexWeightKg != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(PokedexWeightKg);
      }
      if (ParentPokemonId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ParentPokemonId);
      }
      if (HeightStdDev != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(HeightStdDev);
      }
      if (WeightStdDev != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(WeightStdDev);
      }
      if (KmDistanceToHatch != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(KmDistanceToHatch);
      }
      if (FamilyId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) FamilyId);
      }
      if (CandyToEvolve != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(CandyToEvolve);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonId);
      }
      if (ModelScale != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Type2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type2);
      }
      if (camera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (encounter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Encounter);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      size += quickMoves_.CalculateSize(_repeated_quickMoves_codec);
      size += cinematicMoves_.CalculateSize(_repeated_cinematicMoves_codec);
      size += animationTime_.CalculateSize(_repeated_animationTime_codec);
      size += evolutionIds_.CalculateSize(_repeated_evolutionIds_codec);
      if (EvolutionPips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionPips);
      }
      if (Class != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Class);
      }
      if (PokedexHeightM != 0F) {
        size += 1 + 4;
      }
      if (PokedexWeightKg != 0F) {
        size += 2 + 4;
      }
      if (ParentPokemonId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentPokemonId);
      }
      if (HeightStdDev != 0F) {
        size += 2 + 4;
      }
      if (WeightStdDev != 0F) {
        size += 2 + 4;
      }
      if (KmDistanceToHatch != 0F) {
        size += 2 + 4;
      }
      if (FamilyId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FamilyId);
      }
      if (CandyToEvolve != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CandyToEvolve);
      }
      return size;
    }

    public void MergeFrom(PokemonSettings other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.ModelScale != 0F) {
        ModelScale = other.ModelScale;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Type2 != 0) {
        Type2 = other.Type2;
      }
      if (other.camera_ != null) {
        if (camera_ == null) {
          camera_ = new global::Settings.Master.Pokemon.CameraAttributes();
        }
        Camera.MergeFrom(other.Camera);
      }
      if (other.encounter_ != null) {
        if (encounter_ == null) {
          encounter_ = new global::Settings.Master.Pokemon.EncounterAttributes();
        }
        Encounter.MergeFrom(other.Encounter);
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Settings.Master.Pokemon.StatsAttributes();
        }
        Stats.MergeFrom(other.Stats);
      }
      quickMoves_.Add(other.quickMoves_);
      cinematicMoves_.Add(other.cinematicMoves_);
      animationTime_.Add(other.animationTime_);
      evolutionIds_.Add(other.evolutionIds_);
      if (other.EvolutionPips != 0) {
        EvolutionPips = other.EvolutionPips;
      }
      if (other.Class != 0) {
        Class = other.Class;
      }
      if (other.PokedexHeightM != 0F) {
        PokedexHeightM = other.PokedexHeightM;
      }
      if (other.PokedexWeightKg != 0F) {
        PokedexWeightKg = other.PokedexWeightKg;
      }
      if (other.ParentPokemonId != 0) {
        ParentPokemonId = other.ParentPokemonId;
      }
      if (other.HeightStdDev != 0F) {
        HeightStdDev = other.HeightStdDev;
      }
      if (other.WeightStdDev != 0F) {
        WeightStdDev = other.WeightStdDev;
      }
      if (other.KmDistanceToHatch != 0F) {
        KmDistanceToHatch = other.KmDistanceToHatch;
      }
      if (other.FamilyId != 0) {
        FamilyId = other.FamilyId;
      }
      if (other.CandyToEvolve != 0) {
        CandyToEvolve = other.CandyToEvolve;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pokemonId_ = (global::Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 29: {
            ModelScale = input.ReadFloat();
            break;
          }
          case 32: {
            type_ = (global::Enums.PokemonType) input.ReadEnum();
            break;
          }
          case 40: {
            type2_ = (global::Enums.PokemonType) input.ReadEnum();
            break;
          }
          case 50: {
            if (camera_ == null) {
              camera_ = new global::Settings.Master.Pokemon.CameraAttributes();
            }
            input.ReadMessage(camera_);
            break;
          }
          case 58: {
            if (encounter_ == null) {
              encounter_ = new global::Settings.Master.Pokemon.EncounterAttributes();
            }
            input.ReadMessage(encounter_);
            break;
          }
          case 66: {
            if (stats_ == null) {
              stats_ = new global::Settings.Master.Pokemon.StatsAttributes();
            }
            input.ReadMessage(stats_);
            break;
          }
          case 74:
          case 72: {
            quickMoves_.AddEntriesFrom(input, _repeated_quickMoves_codec);
            break;
          }
          case 82:
          case 80: {
            cinematicMoves_.AddEntriesFrom(input, _repeated_cinematicMoves_codec);
            break;
          }
          case 90:
          case 93: {
            animationTime_.AddEntriesFrom(input, _repeated_animationTime_codec);
            break;
          }
          case 98:
          case 96: {
            evolutionIds_.AddEntriesFrom(input, _repeated_evolutionIds_codec);
            break;
          }
          case 104: {
            EvolutionPips = input.ReadInt32();
            break;
          }
          case 112: {
            class_ = (global::Enums.PokemonClass) input.ReadEnum();
            break;
          }
          case 125: {
            PokedexHeightM = input.ReadFloat();
            break;
          }
          case 133: {
            PokedexWeightKg = input.ReadFloat();
            break;
          }
          case 136: {
            parentPokemonId_ = (global::Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 149: {
            HeightStdDev = input.ReadFloat();
            break;
          }
          case 157: {
            WeightStdDev = input.ReadFloat();
            break;
          }
          case 165: {
            KmDistanceToHatch = input.ReadFloat();
            break;
          }
          case 168: {
            familyId_ = (global::Enums.PokemonFamilyId) input.ReadEnum();
            break;
          }
          case 176: {
            CandyToEvolve = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
