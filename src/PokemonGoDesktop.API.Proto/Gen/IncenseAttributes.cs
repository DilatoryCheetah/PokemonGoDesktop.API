// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Settings/Master/Item/IncenseAttributes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Settings.Master.Item {

  /// <summary>Holder for reflection information generated from Settings/Master/Item/IncenseAttributes.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class IncenseAttributesReflection {

    #region Descriptor
    /// <summary>File descriptor for Settings/Master/Item/IncenseAttributes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IncenseAttributesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixTZXR0aW5ncy9NYXN0ZXIvSXRlbS9JbmNlbnNlQXR0cmlidXRlcy5wcm90",
            "bxIUU2V0dGluZ3MuTWFzdGVyLkl0ZW0aF0VudW1zL1Bva2Vtb25UeXBlLnBy",
            "b3RvIscCChFJbmNlbnNlQXR0cmlidXRlcxIgChhpbmNlbnNlX2xpZmV0aW1l",
            "X3NlY29uZHMYASABKAUSKAoMcG9rZW1vbl90eXBlGAIgAygOMhIuRW51bXMu",
            "UG9rZW1vblR5cGUSKAogcG9rZW1vbl9pbmNlbnNlX3R5cGVfcHJvYmFiaWxp",
            "dHkYAyABKAISMAooc3RhbmRpbmdfdGltZV9iZXR3ZWVuX2VuY291bnRlcnNf",
            "c2Vjb25kcxgEIAEoBRItCiVtb3ZpbmdfdGltZV9iZXR3ZWVuX2VuY291bnRl",
            "cl9zZWNvbmRzGAUgASgFEjUKLWRpc3RhbmNlX3JlcXVpcmVkX2Zvcl9zaG9y",
            "dGVyX2ludGVydmFsX21ldGVycxgGIAEoBRIkChxwb2tlbW9uX2F0dHJhY3Rl",
            "ZF9sZW5ndGhfc2VjGAcgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Enums.PokemonTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Settings.Master.Item.IncenseAttributes), global::Settings.Master.Item.IncenseAttributes.Parser, new[]{ "IncenseLifetimeSeconds", "PokemonType", "PokemonIncenseTypeProbability", "StandingTimeBetweenEncountersSeconds", "MovingTimeBetweenEncounterSeconds", "DistanceRequiredForShorterIntervalMeters", "PokemonAttractedLengthSec" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IncenseAttributes : pb::IMessage<IncenseAttributes> {
    private static readonly pb::MessageParser<IncenseAttributes> _parser = new pb::MessageParser<IncenseAttributes>(() => new IncenseAttributes());
    public static pb::MessageParser<IncenseAttributes> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Settings.Master.Item.IncenseAttributesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public IncenseAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    public IncenseAttributes(IncenseAttributes other) : this() {
      incenseLifetimeSeconds_ = other.incenseLifetimeSeconds_;
      pokemonType_ = other.pokemonType_.Clone();
      pokemonIncenseTypeProbability_ = other.pokemonIncenseTypeProbability_;
      standingTimeBetweenEncountersSeconds_ = other.standingTimeBetweenEncountersSeconds_;
      movingTimeBetweenEncounterSeconds_ = other.movingTimeBetweenEncounterSeconds_;
      distanceRequiredForShorterIntervalMeters_ = other.distanceRequiredForShorterIntervalMeters_;
      pokemonAttractedLengthSec_ = other.pokemonAttractedLengthSec_;
    }

    public IncenseAttributes Clone() {
      return new IncenseAttributes(this);
    }

    /// <summary>Field number for the "incense_lifetime_seconds" field.</summary>
    public const int IncenseLifetimeSecondsFieldNumber = 1;
    private int incenseLifetimeSeconds_;
    public int IncenseLifetimeSeconds {
      get { return incenseLifetimeSeconds_; }
      set {
        incenseLifetimeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_type" field.</summary>
    public const int PokemonTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Enums.PokemonType> _repeated_pokemonType_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Enums.PokemonType) x);
    private readonly pbc::RepeatedField<global::Enums.PokemonType> pokemonType_ = new pbc::RepeatedField<global::Enums.PokemonType>();
    public pbc::RepeatedField<global::Enums.PokemonType> PokemonType {
      get { return pokemonType_; }
    }

    /// <summary>Field number for the "pokemon_incense_type_probability" field.</summary>
    public const int PokemonIncenseTypeProbabilityFieldNumber = 3;
    private float pokemonIncenseTypeProbability_;
    public float PokemonIncenseTypeProbability {
      get { return pokemonIncenseTypeProbability_; }
      set {
        pokemonIncenseTypeProbability_ = value;
      }
    }

    /// <summary>Field number for the "standing_time_between_encounters_seconds" field.</summary>
    public const int StandingTimeBetweenEncountersSecondsFieldNumber = 4;
    private int standingTimeBetweenEncountersSeconds_;
    public int StandingTimeBetweenEncountersSeconds {
      get { return standingTimeBetweenEncountersSeconds_; }
      set {
        standingTimeBetweenEncountersSeconds_ = value;
      }
    }

    /// <summary>Field number for the "moving_time_between_encounter_seconds" field.</summary>
    public const int MovingTimeBetweenEncounterSecondsFieldNumber = 5;
    private int movingTimeBetweenEncounterSeconds_;
    public int MovingTimeBetweenEncounterSeconds {
      get { return movingTimeBetweenEncounterSeconds_; }
      set {
        movingTimeBetweenEncounterSeconds_ = value;
      }
    }

    /// <summary>Field number for the "distance_required_for_shorter_interval_meters" field.</summary>
    public const int DistanceRequiredForShorterIntervalMetersFieldNumber = 6;
    private int distanceRequiredForShorterIntervalMeters_;
    public int DistanceRequiredForShorterIntervalMeters {
      get { return distanceRequiredForShorterIntervalMeters_; }
      set {
        distanceRequiredForShorterIntervalMeters_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_attracted_length_sec" field.</summary>
    public const int PokemonAttractedLengthSecFieldNumber = 7;
    private int pokemonAttractedLengthSec_;
    public int PokemonAttractedLengthSec {
      get { return pokemonAttractedLengthSec_; }
      set {
        pokemonAttractedLengthSec_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as IncenseAttributes);
    }

    public bool Equals(IncenseAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncenseLifetimeSeconds != other.IncenseLifetimeSeconds) return false;
      if(!pokemonType_.Equals(other.pokemonType_)) return false;
      if (PokemonIncenseTypeProbability != other.PokemonIncenseTypeProbability) return false;
      if (StandingTimeBetweenEncountersSeconds != other.StandingTimeBetweenEncountersSeconds) return false;
      if (MovingTimeBetweenEncounterSeconds != other.MovingTimeBetweenEncounterSeconds) return false;
      if (DistanceRequiredForShorterIntervalMeters != other.DistanceRequiredForShorterIntervalMeters) return false;
      if (PokemonAttractedLengthSec != other.PokemonAttractedLengthSec) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (IncenseLifetimeSeconds != 0) hash ^= IncenseLifetimeSeconds.GetHashCode();
      hash ^= pokemonType_.GetHashCode();
      if (PokemonIncenseTypeProbability != 0F) hash ^= PokemonIncenseTypeProbability.GetHashCode();
      if (StandingTimeBetweenEncountersSeconds != 0) hash ^= StandingTimeBetweenEncountersSeconds.GetHashCode();
      if (MovingTimeBetweenEncounterSeconds != 0) hash ^= MovingTimeBetweenEncounterSeconds.GetHashCode();
      if (DistanceRequiredForShorterIntervalMeters != 0) hash ^= DistanceRequiredForShorterIntervalMeters.GetHashCode();
      if (PokemonAttractedLengthSec != 0) hash ^= PokemonAttractedLengthSec.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IncenseLifetimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IncenseLifetimeSeconds);
      }
      pokemonType_.WriteTo(output, _repeated_pokemonType_codec);
      if (PokemonIncenseTypeProbability != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PokemonIncenseTypeProbability);
      }
      if (StandingTimeBetweenEncountersSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StandingTimeBetweenEncountersSeconds);
      }
      if (MovingTimeBetweenEncounterSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MovingTimeBetweenEncounterSeconds);
      }
      if (DistanceRequiredForShorterIntervalMeters != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DistanceRequiredForShorterIntervalMeters);
      }
      if (PokemonAttractedLengthSec != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PokemonAttractedLengthSec);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IncenseLifetimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncenseLifetimeSeconds);
      }
      size += pokemonType_.CalculateSize(_repeated_pokemonType_codec);
      if (PokemonIncenseTypeProbability != 0F) {
        size += 1 + 4;
      }
      if (StandingTimeBetweenEncountersSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StandingTimeBetweenEncountersSeconds);
      }
      if (MovingTimeBetweenEncounterSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovingTimeBetweenEncounterSeconds);
      }
      if (DistanceRequiredForShorterIntervalMeters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceRequiredForShorterIntervalMeters);
      }
      if (PokemonAttractedLengthSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokemonAttractedLengthSec);
      }
      return size;
    }

    public void MergeFrom(IncenseAttributes other) {
      if (other == null) {
        return;
      }
      if (other.IncenseLifetimeSeconds != 0) {
        IncenseLifetimeSeconds = other.IncenseLifetimeSeconds;
      }
      pokemonType_.Add(other.pokemonType_);
      if (other.PokemonIncenseTypeProbability != 0F) {
        PokemonIncenseTypeProbability = other.PokemonIncenseTypeProbability;
      }
      if (other.StandingTimeBetweenEncountersSeconds != 0) {
        StandingTimeBetweenEncountersSeconds = other.StandingTimeBetweenEncountersSeconds;
      }
      if (other.MovingTimeBetweenEncounterSeconds != 0) {
        MovingTimeBetweenEncounterSeconds = other.MovingTimeBetweenEncounterSeconds;
      }
      if (other.DistanceRequiredForShorterIntervalMeters != 0) {
        DistanceRequiredForShorterIntervalMeters = other.DistanceRequiredForShorterIntervalMeters;
      }
      if (other.PokemonAttractedLengthSec != 0) {
        PokemonAttractedLengthSec = other.PokemonAttractedLengthSec;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncenseLifetimeSeconds = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            pokemonType_.AddEntriesFrom(input, _repeated_pokemonType_codec);
            break;
          }
          case 29: {
            PokemonIncenseTypeProbability = input.ReadFloat();
            break;
          }
          case 32: {
            StandingTimeBetweenEncountersSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            MovingTimeBetweenEncounterSeconds = input.ReadInt32();
            break;
          }
          case 48: {
            DistanceRequiredForShorterIntervalMeters = input.ReadInt32();
            break;
          }
          case 56: {
            PokemonAttractedLengthSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
