// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data/PlayerData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Data {

  /// <summary>Holder for reflection information generated from Data/PlayerData.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PlayerDataReflection {

    #region Descriptor
    /// <summary>File descriptor for Data/PlayerData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVEYXRhL1BsYXllckRhdGEucHJvdG8SBERhdGEaGUVudW1zL1R1dG9yaWFs",
            "U3RhdGUucHJvdG8aHkRhdGEvUGxheWVyL1BsYXllckF2YXRhci5wcm90bxoc",
            "RGF0YS9QbGF5ZXIvRGFpbHlCb251cy5wcm90bxofRGF0YS9QbGF5ZXIvRXF1",
            "aXBwZWRCYWRnZS5wcm90bxohRGF0YS9QbGF5ZXIvQ29udGFjdFNldHRpbmdz",
            "LnByb3RvGhpEYXRhL1BsYXllci9DdXJyZW5jeS5wcm90byKgAwoKUGxheWVy",
            "RGF0YRIdChVjcmVhdGlvbl90aW1lc3RhbXBfbXMYASABKAMSEAoIdXNlcm5h",
            "bWUYAiABKAkSDAoEdGVhbRgFIAEoBRIsCg50dXRvcmlhbF9zdGF0ZRgHIAMo",
            "DjIULkVudW1zLlR1dG9yaWFsU3RhdGUSKQoGYXZhdGFyGAggASgLMhkuRGF0",
            "YS5QbGF5ZXIuUGxheWVyQXZhdGFyEhsKE21heF9wb2tlbW9uX3N0b3JhZ2UY",
            "CSABKAUSGAoQbWF4X2l0ZW1fc3RvcmFnZRgKIAEoBRIsCgtkYWlseV9ib251",
            "cxgLIAEoCzIXLkRhdGEuUGxheWVyLkRhaWx5Qm9udXMSMgoOZXF1aXBwZWRf",
            "YmFkZ2UYDCABKAsyGi5EYXRhLlBsYXllci5FcXVpcHBlZEJhZGdlEjYKEGNv",
            "bnRhY3Rfc2V0dGluZ3MYDSABKAsyHC5EYXRhLlBsYXllci5Db250YWN0U2V0",
            "dGluZ3MSKQoKY3VycmVuY2llcxgOIAMoCzIVLkRhdGEuUGxheWVyLkN1cnJl",
            "bmN5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Enums.TutorialStateReflection.Descriptor, global::Data.Player.PlayerAvatarReflection.Descriptor, global::Data.Player.DailyBonusReflection.Descriptor, global::Data.Player.EquippedBadgeReflection.Descriptor, global::Data.Player.ContactSettingsReflection.Descriptor, global::Data.Player.CurrencyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.PlayerData), global::Data.PlayerData.Parser, new[]{ "CreationTimestampMs", "Username", "Team", "TutorialState", "Avatar", "MaxPokemonStorage", "MaxItemStorage", "DailyBonus", "EquippedBadge", "ContactSettings", "Currencies" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.PlayerDataReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PlayerData(PlayerData other) : this() {
      creationTimestampMs_ = other.creationTimestampMs_;
      username_ = other.username_;
      team_ = other.team_;
      tutorialState_ = other.tutorialState_.Clone();
      Avatar = other.avatar_ != null ? other.Avatar.Clone() : null;
      maxPokemonStorage_ = other.maxPokemonStorage_;
      maxItemStorage_ = other.maxItemStorage_;
      DailyBonus = other.dailyBonus_ != null ? other.DailyBonus.Clone() : null;
      EquippedBadge = other.equippedBadge_ != null ? other.EquippedBadge.Clone() : null;
      ContactSettings = other.contactSettings_ != null ? other.ContactSettings.Clone() : null;
      currencies_ = other.currencies_.Clone();
    }

    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "creation_timestamp_ms" field.</summary>
    public const int CreationTimestampMsFieldNumber = 1;
    private long creationTimestampMs_;
    public long CreationTimestampMs {
      get { return creationTimestampMs_; }
      set {
        creationTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 5;
    private int team_;
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "tutorial_state" field.</summary>
    public const int TutorialStateFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Enums.TutorialState> _repeated_tutorialState_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::Enums.TutorialState) x);
    private readonly pbc::RepeatedField<global::Enums.TutorialState> tutorialState_ = new pbc::RepeatedField<global::Enums.TutorialState>();
    public pbc::RepeatedField<global::Enums.TutorialState> TutorialState {
      get { return tutorialState_; }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 8;
    private global::Data.Player.PlayerAvatar avatar_;
    public global::Data.Player.PlayerAvatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "max_pokemon_storage" field.</summary>
    public const int MaxPokemonStorageFieldNumber = 9;
    private int maxPokemonStorage_;
    public int MaxPokemonStorage {
      get { return maxPokemonStorage_; }
      set {
        maxPokemonStorage_ = value;
      }
    }

    /// <summary>Field number for the "max_item_storage" field.</summary>
    public const int MaxItemStorageFieldNumber = 10;
    private int maxItemStorage_;
    public int MaxItemStorage {
      get { return maxItemStorage_; }
      set {
        maxItemStorage_ = value;
      }
    }

    /// <summary>Field number for the "daily_bonus" field.</summary>
    public const int DailyBonusFieldNumber = 11;
    private global::Data.Player.DailyBonus dailyBonus_;
    public global::Data.Player.DailyBonus DailyBonus {
      get { return dailyBonus_; }
      set {
        dailyBonus_ = value;
      }
    }

    /// <summary>Field number for the "equipped_badge" field.</summary>
    public const int EquippedBadgeFieldNumber = 12;
    private global::Data.Player.EquippedBadge equippedBadge_;
    public global::Data.Player.EquippedBadge EquippedBadge {
      get { return equippedBadge_; }
      set {
        equippedBadge_ = value;
      }
    }

    /// <summary>Field number for the "contact_settings" field.</summary>
    public const int ContactSettingsFieldNumber = 13;
    private global::Data.Player.ContactSettings contactSettings_;
    public global::Data.Player.ContactSettings ContactSettings {
      get { return contactSettings_; }
      set {
        contactSettings_ = value;
      }
    }

    /// <summary>Field number for the "currencies" field.</summary>
    public const int CurrenciesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Data.Player.Currency> _repeated_currencies_codec
        = pb::FieldCodec.ForMessage(114, global::Data.Player.Currency.Parser);
    private readonly pbc::RepeatedField<global::Data.Player.Currency> currencies_ = new pbc::RepeatedField<global::Data.Player.Currency>();
    public pbc::RepeatedField<global::Data.Player.Currency> Currencies {
      get { return currencies_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreationTimestampMs != other.CreationTimestampMs) return false;
      if (Username != other.Username) return false;
      if (Team != other.Team) return false;
      if(!tutorialState_.Equals(other.tutorialState_)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (MaxPokemonStorage != other.MaxPokemonStorage) return false;
      if (MaxItemStorage != other.MaxItemStorage) return false;
      if (!object.Equals(DailyBonus, other.DailyBonus)) return false;
      if (!object.Equals(EquippedBadge, other.EquippedBadge)) return false;
      if (!object.Equals(ContactSettings, other.ContactSettings)) return false;
      if(!currencies_.Equals(other.currencies_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CreationTimestampMs != 0L) hash ^= CreationTimestampMs.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      hash ^= tutorialState_.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (MaxPokemonStorage != 0) hash ^= MaxPokemonStorage.GetHashCode();
      if (MaxItemStorage != 0) hash ^= MaxItemStorage.GetHashCode();
      if (dailyBonus_ != null) hash ^= DailyBonus.GetHashCode();
      if (equippedBadge_ != null) hash ^= EquippedBadge.GetHashCode();
      if (contactSettings_ != null) hash ^= ContactSettings.GetHashCode();
      hash ^= currencies_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CreationTimestampMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CreationTimestampMs);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Team != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Team);
      }
      tutorialState_.WriteTo(output, _repeated_tutorialState_codec);
      if (avatar_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Avatar);
      }
      if (MaxPokemonStorage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxPokemonStorage);
      }
      if (MaxItemStorage != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxItemStorage);
      }
      if (dailyBonus_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DailyBonus);
      }
      if (equippedBadge_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EquippedBadge);
      }
      if (contactSettings_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ContactSettings);
      }
      currencies_.WriteTo(output, _repeated_currencies_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (CreationTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTimestampMs);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      size += tutorialState_.CalculateSize(_repeated_tutorialState_codec);
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (MaxPokemonStorage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPokemonStorage);
      }
      if (MaxItemStorage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxItemStorage);
      }
      if (dailyBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyBonus);
      }
      if (equippedBadge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquippedBadge);
      }
      if (contactSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactSettings);
      }
      size += currencies_.CalculateSize(_repeated_currencies_codec);
      return size;
    }

    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.CreationTimestampMs != 0L) {
        CreationTimestampMs = other.CreationTimestampMs;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      tutorialState_.Add(other.tutorialState_);
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          avatar_ = new global::Data.Player.PlayerAvatar();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.MaxPokemonStorage != 0) {
        MaxPokemonStorage = other.MaxPokemonStorage;
      }
      if (other.MaxItemStorage != 0) {
        MaxItemStorage = other.MaxItemStorage;
      }
      if (other.dailyBonus_ != null) {
        if (dailyBonus_ == null) {
          dailyBonus_ = new global::Data.Player.DailyBonus();
        }
        DailyBonus.MergeFrom(other.DailyBonus);
      }
      if (other.equippedBadge_ != null) {
        if (equippedBadge_ == null) {
          equippedBadge_ = new global::Data.Player.EquippedBadge();
        }
        EquippedBadge.MergeFrom(other.EquippedBadge);
      }
      if (other.contactSettings_ != null) {
        if (contactSettings_ == null) {
          contactSettings_ = new global::Data.Player.ContactSettings();
        }
        ContactSettings.MergeFrom(other.ContactSettings);
      }
      currencies_.Add(other.currencies_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CreationTimestampMs = input.ReadInt64();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 40: {
            Team = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            tutorialState_.AddEntriesFrom(input, _repeated_tutorialState_codec);
            break;
          }
          case 66: {
            if (avatar_ == null) {
              avatar_ = new global::Data.Player.PlayerAvatar();
            }
            input.ReadMessage(avatar_);
            break;
          }
          case 72: {
            MaxPokemonStorage = input.ReadInt32();
            break;
          }
          case 80: {
            MaxItemStorage = input.ReadInt32();
            break;
          }
          case 90: {
            if (dailyBonus_ == null) {
              dailyBonus_ = new global::Data.Player.DailyBonus();
            }
            input.ReadMessage(dailyBonus_);
            break;
          }
          case 98: {
            if (equippedBadge_ == null) {
              equippedBadge_ = new global::Data.Player.EquippedBadge();
            }
            input.ReadMessage(equippedBadge_);
            break;
          }
          case 106: {
            if (contactSettings_ == null) {
              contactSettings_ = new global::Data.Player.ContactSettings();
            }
            input.ReadMessage(contactSettings_);
            break;
          }
          case 114: {
            currencies_.AddEntriesFrom(input, _repeated_currencies_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
