// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data/Battle/BattleResults.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Data.Battle {

  /// <summary>Holder for reflection information generated from Data/Battle/BattleResults.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BattleResultsReflection {

    #region Descriptor
    /// <summary>File descriptor for Data/Battle/BattleResults.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleResultsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9EYXRhL0JhdHRsZS9CYXR0bGVSZXN1bHRzLnByb3RvEgtEYXRhLkJhdHRs",
            "ZRoXRGF0YS9HeW0vR3ltU3RhdGUucHJvdG8aI0RhdGEvQmF0dGxlL0JhdHRs",
            "ZVBhcnRpY2lwYW50LnByb3RvIsgBCg1CYXR0bGVSZXN1bHRzEiUKCWd5bV9z",
            "dGF0ZRgBIAEoCzISLkRhdGEuR3ltLkd5bVN0YXRlEjEKCWF0dGFja2VycxgC",
            "IAMoCzIeLkRhdGEuQmF0dGxlLkJhdHRsZVBhcnRpY2lwYW50EiEKGXBsYXll",
            "cl9leHBlcmllbmNlX2F3YXJkZWQYAyADKAUSIAoYbmV4dF9kZWZlbmRlcl9w",
            "b2tlbW9uX2lkGAQgASgDEhgKEGd5bV9wb2ludHNfZGVsdGEYBSABKAViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Data.Gym.GymStateReflection.Descriptor, global::Data.Battle.BattleParticipantReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.Battle.BattleResults), global::Data.Battle.BattleResults.Parser, new[]{ "GymState", "Attackers", "PlayerExperienceAwarded", "NextDefenderPokemonId", "GymPointsDelta" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BattleResults : pb::IMessage<BattleResults> {
    private static readonly pb::MessageParser<BattleResults> _parser = new pb::MessageParser<BattleResults>(() => new BattleResults());
    public static pb::MessageParser<BattleResults> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.Battle.BattleResultsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BattleResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BattleResults(BattleResults other) : this() {
      GymState = other.gymState_ != null ? other.GymState.Clone() : null;
      attackers_ = other.attackers_.Clone();
      playerExperienceAwarded_ = other.playerExperienceAwarded_.Clone();
      nextDefenderPokemonId_ = other.nextDefenderPokemonId_;
      gymPointsDelta_ = other.gymPointsDelta_;
    }

    public BattleResults Clone() {
      return new BattleResults(this);
    }

    /// <summary>Field number for the "gym_state" field.</summary>
    public const int GymStateFieldNumber = 1;
    private global::Data.Gym.GymState gymState_;
    public global::Data.Gym.GymState GymState {
      get { return gymState_; }
      set {
        gymState_ = value;
      }
    }

    /// <summary>Field number for the "attackers" field.</summary>
    public const int AttackersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Data.Battle.BattleParticipant> _repeated_attackers_codec
        = pb::FieldCodec.ForMessage(18, global::Data.Battle.BattleParticipant.Parser);
    private readonly pbc::RepeatedField<global::Data.Battle.BattleParticipant> attackers_ = new pbc::RepeatedField<global::Data.Battle.BattleParticipant>();
    public pbc::RepeatedField<global::Data.Battle.BattleParticipant> Attackers {
      get { return attackers_; }
    }

    /// <summary>Field number for the "player_experience_awarded" field.</summary>
    public const int PlayerExperienceAwardedFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_playerExperienceAwarded_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> playerExperienceAwarded_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> PlayerExperienceAwarded {
      get { return playerExperienceAwarded_; }
    }

    /// <summary>Field number for the "next_defender_pokemon_id" field.</summary>
    public const int NextDefenderPokemonIdFieldNumber = 4;
    private long nextDefenderPokemonId_;
    public long NextDefenderPokemonId {
      get { return nextDefenderPokemonId_; }
      set {
        nextDefenderPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "gym_points_delta" field.</summary>
    public const int GymPointsDeltaFieldNumber = 5;
    private int gymPointsDelta_;
    public int GymPointsDelta {
      get { return gymPointsDelta_; }
      set {
        gymPointsDelta_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BattleResults);
    }

    public bool Equals(BattleResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GymState, other.GymState)) return false;
      if(!attackers_.Equals(other.attackers_)) return false;
      if(!playerExperienceAwarded_.Equals(other.playerExperienceAwarded_)) return false;
      if (NextDefenderPokemonId != other.NextDefenderPokemonId) return false;
      if (GymPointsDelta != other.GymPointsDelta) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (gymState_ != null) hash ^= GymState.GetHashCode();
      hash ^= attackers_.GetHashCode();
      hash ^= playerExperienceAwarded_.GetHashCode();
      if (NextDefenderPokemonId != 0L) hash ^= NextDefenderPokemonId.GetHashCode();
      if (GymPointsDelta != 0) hash ^= GymPointsDelta.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gymState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GymState);
      }
      attackers_.WriteTo(output, _repeated_attackers_codec);
      playerExperienceAwarded_.WriteTo(output, _repeated_playerExperienceAwarded_codec);
      if (NextDefenderPokemonId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NextDefenderPokemonId);
      }
      if (GymPointsDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GymPointsDelta);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gymState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GymState);
      }
      size += attackers_.CalculateSize(_repeated_attackers_codec);
      size += playerExperienceAwarded_.CalculateSize(_repeated_playerExperienceAwarded_codec);
      if (NextDefenderPokemonId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextDefenderPokemonId);
      }
      if (GymPointsDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GymPointsDelta);
      }
      return size;
    }

    public void MergeFrom(BattleResults other) {
      if (other == null) {
        return;
      }
      if (other.gymState_ != null) {
        if (gymState_ == null) {
          gymState_ = new global::Data.Gym.GymState();
        }
        GymState.MergeFrom(other.GymState);
      }
      attackers_.Add(other.attackers_);
      playerExperienceAwarded_.Add(other.playerExperienceAwarded_);
      if (other.NextDefenderPokemonId != 0L) {
        NextDefenderPokemonId = other.NextDefenderPokemonId;
      }
      if (other.GymPointsDelta != 0) {
        GymPointsDelta = other.GymPointsDelta;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gymState_ == null) {
              gymState_ = new global::Data.Gym.GymState();
            }
            input.ReadMessage(gymState_);
            break;
          }
          case 18: {
            attackers_.AddEntriesFrom(input, _repeated_attackers_codec);
            break;
          }
          case 26:
          case 24: {
            playerExperienceAwarded_.AddEntriesFrom(input, _repeated_playerExperienceAwarded_codec);
            break;
          }
          case 32: {
            NextDefenderPokemonId = input.ReadInt64();
            break;
          }
          case 40: {
            GymPointsDelta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
