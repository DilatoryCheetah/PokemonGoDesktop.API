// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Inventory/AppliedItems.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Inventory {

  /// <summary>Holder for reflection information generated from Inventory/AppliedItems.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class AppliedItemsReflection {

    #region Descriptor
    /// <summary>File descriptor for Inventory/AppliedItems.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AppliedItemsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxJbnZlbnRvcnkvQXBwbGllZEl0ZW1zLnByb3RvEglJbnZlbnRvcnkaG0lu",
            "dmVudG9yeS9BcHBsaWVkSXRlbS5wcm90byI0CgxBcHBsaWVkSXRlbXMSJAoE",
            "aXRlbRgEIAMoCzIWLkludmVudG9yeS5BcHBsaWVkSXRlbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Inventory.AppliedItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Inventory.AppliedItems), global::Inventory.AppliedItems.Parser, new[]{ "Item" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AppliedItems : pb::IMessage<AppliedItems> {
    private static readonly pb::MessageParser<AppliedItems> _parser = new pb::MessageParser<AppliedItems>(() => new AppliedItems());
    public static pb::MessageParser<AppliedItems> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Inventory.AppliedItemsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AppliedItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AppliedItems(AppliedItems other) : this() {
      item_ = other.item_.Clone();
    }

    public AppliedItems Clone() {
      return new AppliedItems(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Inventory.AppliedItem> _repeated_item_codec
        = pb::FieldCodec.ForMessage(34, global::Inventory.AppliedItem.Parser);
    private readonly pbc::RepeatedField<global::Inventory.AppliedItem> item_ = new pbc::RepeatedField<global::Inventory.AppliedItem>();
    public pbc::RepeatedField<global::Inventory.AppliedItem> Item {
      get { return item_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AppliedItems);
    }

    public bool Equals(AppliedItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    public void MergeFrom(AppliedItems other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 34: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
