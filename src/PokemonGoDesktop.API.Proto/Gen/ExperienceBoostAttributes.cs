// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Settings/Master/Item/ExperienceBoostAttributes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Settings.Master.Item {

  /// <summary>Holder for reflection information generated from Settings/Master/Item/ExperienceBoostAttributes.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ExperienceBoostAttributesReflection {

    #region Descriptor
    /// <summary>File descriptor for Settings/Master/Item/ExperienceBoostAttributes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExperienceBoostAttributesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRTZXR0aW5ncy9NYXN0ZXIvSXRlbS9FeHBlcmllbmNlQm9vc3RBdHRyaWJ1",
            "dGVzLnByb3RvEhRTZXR0aW5ncy5NYXN0ZXIuSXRlbSJNChlFeHBlcmllbmNl",
            "Qm9vc3RBdHRyaWJ1dGVzEhUKDXhwX211bHRpcGxpZXIYASABKAISGQoRYm9v",
            "c3RfZHVyYXRpb25fbXMYAiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Settings.Master.Item.ExperienceBoostAttributes), global::Settings.Master.Item.ExperienceBoostAttributes.Parser, new[]{ "XpMultiplier", "BoostDurationMs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExperienceBoostAttributes : pb::IMessage<ExperienceBoostAttributes> {
    private static readonly pb::MessageParser<ExperienceBoostAttributes> _parser = new pb::MessageParser<ExperienceBoostAttributes>(() => new ExperienceBoostAttributes());
    public static pb::MessageParser<ExperienceBoostAttributes> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Settings.Master.Item.ExperienceBoostAttributesReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ExperienceBoostAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExperienceBoostAttributes(ExperienceBoostAttributes other) : this() {
      xpMultiplier_ = other.xpMultiplier_;
      boostDurationMs_ = other.boostDurationMs_;
    }

    public ExperienceBoostAttributes Clone() {
      return new ExperienceBoostAttributes(this);
    }

    /// <summary>Field number for the "xp_multiplier" field.</summary>
    public const int XpMultiplierFieldNumber = 1;
    private float xpMultiplier_;
    public float XpMultiplier {
      get { return xpMultiplier_; }
      set {
        xpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "boost_duration_ms" field.</summary>
    public const int BoostDurationMsFieldNumber = 2;
    private int boostDurationMs_;
    public int BoostDurationMs {
      get { return boostDurationMs_; }
      set {
        boostDurationMs_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExperienceBoostAttributes);
    }

    public bool Equals(ExperienceBoostAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XpMultiplier != other.XpMultiplier) return false;
      if (BoostDurationMs != other.BoostDurationMs) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (XpMultiplier != 0F) hash ^= XpMultiplier.GetHashCode();
      if (BoostDurationMs != 0) hash ^= BoostDurationMs.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (XpMultiplier != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XpMultiplier);
      }
      if (BoostDurationMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoostDurationMs);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (XpMultiplier != 0F) {
        size += 1 + 4;
      }
      if (BoostDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoostDurationMs);
      }
      return size;
    }

    public void MergeFrom(ExperienceBoostAttributes other) {
      if (other == null) {
        return;
      }
      if (other.XpMultiplier != 0F) {
        XpMultiplier = other.XpMultiplier;
      }
      if (other.BoostDurationMs != 0) {
        BoostDurationMs = other.BoostDurationMs;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            XpMultiplier = input.ReadFloat();
            break;
          }
          case 16: {
            BoostDurationMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
